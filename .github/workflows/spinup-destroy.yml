name: Configure Azure environment
on:
  pull_request:
    types: [labeled]

env:
  TF_VAR_location: "australiasoutheast"
  TF_VAR_resource_group_name: "cd-with-actions"
  TF_VAR_app_plan: "actions-ttt-deployment"
  TF_VAR_webapp_name: "${{ github.actor }}-ttt-app"
  TF_VAR_image_registry_url: "https://ghcr.io"
  TF_VAR_image_registry_username: ${{ github.actor }}
  TF_VAR_image_registry_password: ${{ secrets.CR_PAT}}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "ap-southeast-2"

jobs:
  setup-up-azure-resources:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'spin up environment')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform -chdir=infra init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          cd infra
          terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd infra
          terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -auto-approve -input=false

  destroy-azure-resources:
    runs-on: ubuntu-latest

    if: contains(github.event.pull_request.labels.*.name, 'destroy environment')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform Destroy
        run: |
          cd infra
          terraform destroy -auto-approve -input=false
